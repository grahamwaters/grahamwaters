[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "make_blocks_personal_projects",
        "kind": 2,
        "importPath": "make_blocks",
        "description": "make_blocks",
        "peekOfCode": "def make_blocks_personal_projects(username):\n    \"\"\"\n    Generated by grahamwaters on GitHub\n    make_blocks takes a username and returns a list of the repos that are not forks formatting them as blocks for the README.md\n    This is using the great work of DenverCoder1 to get the list of repos from the github api, and would not be possible without it. Thanks to DenverCoder1 for the great work.\n    :param username: the github username\n    :type username: str\n    :return: a list of the repos that are not forks formatting them as blocks for the README.md\n    :rtype: list\n    # credit for the tile template goes to DenverCoder1",
        "detail": "make_blocks",
        "documentation": {}
    },
    {
        "label": "make_contrib_blocks",
        "kind": 2,
        "importPath": "make_blocks",
        "description": "make_blocks",
        "peekOfCode": "def make_contrib_blocks(username):\n    \"\"\"\n    Generated by grahamwaters on GitHub\n    make_contrib_blocks takes a username and returns a list of the repos that are not forks formatting them as blocks for the README.md\n    This is using the great work of DenverCoder1 to get the list of repos from the github api, and would not be possible without it. Thanks to DenverCoder1 for the great work.\n    :param username: the github username\n    :type username: str\n    :return: a list of the repos that are not forks formatting them as blocks for the README.md\n    :rtype: list\n    # credit for the tile template goes to DenverCoder1",
        "detail": "make_blocks",
        "documentation": {}
    },
    {
        "label": "make_dynamic_text_template",
        "kind": 2,
        "importPath": "make_blocks",
        "description": "make_blocks",
        "peekOfCode": "def make_dynamic_text_template(middle_text):\n    # part_one is the opening part\n    part_one = f'[![Typing SVG](https://readme-typing-svg.demolab.com/?lines='\n    # part_two is the middle part\n    part_two = ''\n    # part_three is the closing part\n    part_three = ')](https://git.io/typing-svg)'\n    if type(middle_text) == list:\n        # add a ; after each commit message\n        middle_text = [commit_message.replace(' ',\"+\") + ';' for commit_message in middle_text]",
        "detail": "make_blocks",
        "documentation": {}
    },
    {
        "label": "username",
        "kind": 5,
        "importPath": "make_blocks",
        "description": "make_blocks",
        "peekOfCode": "username = 'grahamwaters'\n# repo_name = 'PySeas'\nimport json\nimport requests\n# read the json file for the repos list and convert to a python list\nwith open('repos_profile.json') as f:\n    repos = json.load(f)\n# make a list of the public repos in the profile\npublic_repos = [repo for repo in repos if repo['private'] == False]\ndef make_blocks_personal_projects(username):",
        "detail": "make_blocks",
        "documentation": {}
    },
    {
        "label": "public_repos",
        "kind": 5,
        "importPath": "make_blocks",
        "description": "make_blocks",
        "peekOfCode": "public_repos = [repo for repo in repos if repo['private'] == False]\ndef make_blocks_personal_projects(username):\n    \"\"\"\n    Generated by grahamwaters on GitHub\n    make_blocks takes a username and returns a list of the repos that are not forks formatting them as blocks for the README.md\n    This is using the great work of DenverCoder1 to get the list of repos from the github api, and would not be possible without it. Thanks to DenverCoder1 for the great work.\n    :param username: the github username\n    :type username: str\n    :return: a list of the repos that are not forks formatting them as blocks for the README.md\n    :rtype: list",
        "detail": "make_blocks",
        "documentation": {}
    },
    {
        "label": "readme_toppers",
        "kind": 5,
        "importPath": "make_blocks",
        "description": "make_blocks",
        "peekOfCode": "readme_toppers = []\n# for repo_name in repo_names:\n#     readme_toppers.append(make_dynamic_text(username, repo_name))\n# Save them to a readme_toppers.md file\nwith open('readme_toppers.md', 'w') as f:\n    f.write(''.join(readme_toppers))\n# def get_all_libraries_used_in_repos(username):\n#     # get all the repos\n#     repos = requests.get(f'https://api.github.com/users/{username}/repos').json()\n#     # get the list of all the libraries used in the repos",
        "detail": "make_blocks",
        "documentation": {}
    },
    {
        "label": "taglines",
        "kind": 5,
        "importPath": "make_blocks",
        "description": "make_blocks",
        "peekOfCode": "taglines = [\"Text Classification\", \"Natural Language Processing (NLP)\", \"Supervised Learning\", \"Logistic Regression\", \"Linear Regression\", \"Logistic Regression\", \"Classification\", \"Readability Counts\", \"Matplotlib\", \"Seaborn\", \"Excel as a last resort\", \"OSX > Loading\", \"Data Analysis\", \"Performing EDA\", \"Data Cleaning\", \"More Data Cleaning\", \"...more data cleaning\", \"automating data cleaning\", \"finding joy!\", \"Outlier Detection\", \"Feature Engineering\", \"Feature Selection\", \"Modeling\", \"Model Evaluation\", \"Boosting with AdaBoost\", \"Watching for UAEs\", \"Analyzing Gutenberg\", \"Writing Historical Fiction\", \"Creating Art with GPT-3\", \"Looking for ways to apply ML\",'to everything...']\ntaglines = ['Data Scientist','Machine Learning Researcher','Technical Journalist','Data Analyst','A.I. Enthusiast']\ntaglines = ['NOAA Station']\n# make a dynamic text for the libraries used in the repos\ntagline_md = make_dynamic_text_template(taglines)\n# save the dynamic text to a file\nwith open('taglines.md', 'w') as f:\n    f.write(tagline_md)",
        "detail": "make_blocks",
        "documentation": {}
    },
    {
        "label": "taglines",
        "kind": 5,
        "importPath": "make_blocks",
        "description": "make_blocks",
        "peekOfCode": "taglines = ['Data Scientist','Machine Learning Researcher','Technical Journalist','Data Analyst','A.I. Enthusiast']\ntaglines = ['NOAA Station']\n# make a dynamic text for the libraries used in the repos\ntagline_md = make_dynamic_text_template(taglines)\n# save the dynamic text to a file\nwith open('taglines.md', 'w') as f:\n    f.write(tagline_md)",
        "detail": "make_blocks",
        "documentation": {}
    },
    {
        "label": "taglines",
        "kind": 5,
        "importPath": "make_blocks",
        "description": "make_blocks",
        "peekOfCode": "taglines = ['NOAA Station']\n# make a dynamic text for the libraries used in the repos\ntagline_md = make_dynamic_text_template(taglines)\n# save the dynamic text to a file\nwith open('taglines.md', 'w') as f:\n    f.write(tagline_md)",
        "detail": "make_blocks",
        "documentation": {}
    },
    {
        "label": "tagline_md",
        "kind": 5,
        "importPath": "make_blocks",
        "description": "make_blocks",
        "peekOfCode": "tagline_md = make_dynamic_text_template(taglines)\n# save the dynamic text to a file\nwith open('taglines.md', 'w') as f:\n    f.write(tagline_md)",
        "detail": "make_blocks",
        "documentation": {}
    }
]